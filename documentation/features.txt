Grammar can handle the following:

1) greedy, stingy, and possessive repetition
2) '?', '+', '*', '{x}', '{x,y}', '{,x}', and '{x,}' repetition suffixes
3) grouping
     <rule> = [ <a> <b> ]++
4) alternation
     <rule> = <a> | <b>
5) sequences
     <rule> = <a> <b> <c>
6) literals
     <rule> = <a> "fred" <b>
     <rule> = <a> 'fred' <b>
7) blank lines and comments
     <rule> = <a> | <b> # the '#' character begins a comment
8) back references
     <rule> = [ <a> | <b> ] <c> 1 # the digit is a one-based index of constituents of the same rule
                                  # in this case '1' must match verbatim whatever '[ <a> | <b> ]' matched
                                  # NOTE: back references can't take repetition suffixes
9) terminal regular expressions
     <rule> = <a> <s> <b>
        <s> = /\s++/
10) reasonably thorough optimization and error checking
11) memoization of matching success where possible -- actual matches are recorded for literals and regexes, success 
    or failure for all other rules except back references, whose success or failure cannot easily be cached
12) every Grammar must have a root rule, the basis of all matching, called ROOT; e.g.,
     <ROOT> = <a> <b>
13) all rule labels must be some sequence of \w characters
14) postponed definition of terminals as
     * literals
     * regexes
     * arbitrary rules
     * other grammars
15) pretty printing of grammars
16) debugging mode
17) native zero-width forward assertions (variable length backwards assertions in works)
     <rule> = ~<a> <b> # <a> must be able to match where <b> matches
     <rule> = !<a> <b> # <a> must not be able to match where <b> matches
18) backtracking barriers
     <rule> = <a> : <b>  # never backtrack into <a> in this rule once you've matched!
     <rule> = <a> :: <b> # if <b> fails to match, the grammar cannot match at this offset
19) impose arbitrary conditions on rule to be tested after rule matches
     <rule> = <a> <b> <c> (length_less_than_20)
    in this case one must instantiate a Condition that contains the desired test code, this object will be passed 
    the character sequence, the Match, and the Matcher that produced it.
    !NOTE! conditions on terminal rules must not make use of the Matcher object if you wish to "study" the character
    sequence before matching (the default behavior). Also, the condition code should have immutable state and be 
    purely functional, or at least cause no changes that will affect matching. For example, you might use a condition
    to log information, but it would be unwise to modify a HashTable, particularly without synchronization.
